{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","a","b","Math","random","reactVT","React","this","map","key","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+3GAYeA,G,MATG,SAAAC,GAAK,OAEpB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAU,iBACzD,yBAAKA,UAAU,iBACd,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCFvBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,YCE1CC,G,MAFD,SAAAX,GAAK,OAAI,wBAAII,UAAU,SAASJ,EAAMU,Y,QCMhDE,G,MAAiB,GACjBC,EAAY,EACZC,EACF,qFA+GaC,E,2MAvGbC,MAAQ,CACNC,UACAL,iBACAC,YACAC,gB,EAGFZ,WAAa,SAAAC,GAEX,IAAMc,EAAU,EAAKD,MAAMC,QAErBC,EAAeD,EAAQE,QAAO,SAAAC,GAAK,OAAIA,EAAMjB,KAAOA,KAE1D,GAAIe,EAAa,GAAGG,QAAS,CAC3BC,QAAQC,IAAI,oBAAsBX,GAClCU,QAAQC,IAAI,eAAiBV,GAE7BD,EAAiB,EACjBE,EAAe,qCAEf,IAAK,IAAIU,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAClCP,EAAQO,GAAGH,SAAU,EAGvB,EAAKK,SAAS,CAAEZ,iBAChB,EAAKY,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAAET,iBACX,GAAIL,EAAiB,GAE1BM,EAAa,GAAGG,SAAU,EAG1BT,IACAE,EAAe,2DAEXF,EAAiBC,IACnBA,EAAYD,EACZ,EAAKc,SAAS,CAAEb,eAIlBI,EAAQU,MAAK,SAASC,EAAGC,GACvB,MAAO,GAAMC,KAAKC,YAIpB,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAAEZ,qBACX,CAELI,EAAa,GAAGG,SAAU,EAG1BT,EAAiB,EAGjBE,EAAe,gCACfD,EAAY,GACZ,EAAKa,SAAS,CAAEb,cAEhB,IAAK,IAAIW,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,IAClCP,EAAQO,GAAGH,SAAU,EAGvBJ,EAAQU,MAAK,SAASC,EAAGC,GACvB,MAAO,GAAMC,KAAKC,YAIpB,EAAKL,SAAS,CAAET,YAChB,EAAKS,SAAS,CAAEd,mBAChB,EAAKc,SAAS,CAAEZ,mB,oFA3ElBkB,IAAQC,IAAOC,Q,+BA8EP,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,2BAEA,wBAAI9B,UAAU,gBAAgB8B,KAAKlB,MAAMF,cAEzC,wBAAIV,UAAU,4BAAd,oBACoB8B,KAAKlB,MAAMJ,eAC7B,6BAFF,eAGesB,KAAKlB,MAAMH,WAE1B,yBAAKT,UAAU,aACb,yBAAKA,UAAU,OACZ8B,KAAKlB,MAAMC,QAAQkB,KAAI,SAAAf,GAAK,OAC3B,kBAAC,EAAD,CACElB,WAAY,EAAKA,WACjBC,GAAIiB,EAAMjB,GACViC,IAAKhB,EAAMjB,GACXK,MAAOY,EAAMZ,kB,GApGX6B,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.4370f9f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./MatchCard.css\";\r\n\r\nconst MatchCard = props => (\r\n\r\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\r\n\t\t\t\t<div className=\"img-container\">\r\n\t\t\t\t\t<img alt={props.name} src={props.image} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n);\r\n\r\nexport default MatchCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport reactVT from 'react-vt';\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./components/match.json\";\nimport \"./App.css\";\n// import Readme from './readme'\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage =\n  \"Click on a hockey player to gain points! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n  // ReactVT Component for testing\n  componentWillMount() {\n    reactVT(React, this);\n  }\n  // This will look for a match in the match.json file\n  state = {\n    matches,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n    // Take the array\n    const matches = this.state.matches;\n    // Search for match\n    const clickedMatch = matches.filter(match => match.id === id);\n    // This sets logic for whether or not the user already guessed\n    if (clickedMatch[0].clicked) {\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Sorry! You already chose this one.\";\n\n      for (let i = 0; i < matches.length; i++) {\n        matches[i].clicked = false;\n      }\n\n      this.setState({ clickMessage });\n      this.setState({ correctGuesses });\n      this.setState({ matches });\n    } else if (correctGuesses < 11) {\n      // Set its value to true\n      clickedMatch[0].clicked = true;\n\n      // Add counter\n      correctGuesses++;\n      clickMessage = \"Congrats! You haven't chosen this before! Choose another\";\n\n      if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      //This will render a random number and change the sort order\n      matches.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({ matches });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n      // Default to true\n      clickedMatch[0].clicked = true;\n\n      // Reset the counter\n      correctGuesses = 0;\n\n      // Winning message to user\n      clickMessage = \"You are fabulous! Play Again!\";\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i = 0; i < matches.length; i++) {\n        matches[i].clicked = false;\n      }\n      //This will render a random number and change the sort order\n      matches.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      // Set this.state.matches equal to the new matches array\n      this.setState({ matches });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    }\n  };\n  render() {\n    return (\n      <Wrapper>\n        <Title>NHL Hocky Match-up</Title>\n\n        <h3 className=\"scoreSummary\">{this.state.clickMessage}</h3>\n\n        <h3 className=\"scoreSummary card-header\">\n          Correct Guesses: {this.state.correctGuesses}\n          <br />\n          Best Score: {this.state.bestScore}\n        </h3>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.matches.map(match => (\n              <MatchCard\n                setClicked={this.setClicked}\n                id={match.id}\n                key={match.id}\n                image={match.image}\n              />\n            ))}\n          </div>\n        </div>\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}